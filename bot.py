import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
FEEDBACK_CHAT_ID = int(os.getenv("FEEDBACK_CHAT_ID"))
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_interior_images():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    existing_images = []
    for image_name in INTERIOR_IMAGES:
        image_path = os.path.join(INTERIOR_IMAGES_DIR, image_name)
        if os.path.exists(image_path):
            existing_images.append(image_path)
        else:
            logger.warning(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return existing_images

def get_menu_images():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    existing_images = []
    for image_name in MENU_IMAGES:
        image_path = os.path.join(MENU_IMAGES_DIR, image_name)
        if os.path.exists(image_path):
            existing_images.append(image_path)
        else:
            logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return existing_images


# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –º–µ–Ω—é (–ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É 'menu_images')
MENU_IMAGES_DIR = "menu_images"
MENU_IMAGES = [
    "menu1.jpg",
    "menu2.jpg", 
    "menu3.jpg",
    "menu4.jpg",
    "menu5.jpg",
    "menu6.jpg"
]

# –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ (–ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É 'interior_photos')
INTERIOR_IMAGES_DIR = "interior_photos"
INTERIOR_IMAGES = [
    "interior1.jpg",
    "interior2.jpg",
    "interior3.jpg",
]

# –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
CONTACT_INFO = {
    "address": "–≥.–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥, —É–ª. –ñ–∏—Ç–æ–º–∏—Ä—Å–∫–∞—è, 22",
    "phone": "+7 (4012) 38-99-75",
    "hours": "12:00-23:00",
    "coordinates": "https://yandex.ru/maps/-/CDeHbS10"
}

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é)
BOOKING_URL = "https://clck.ru/36vuug"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é."""
    
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–®—Ç–∞–π–Ω–¥–∞–º–º 99* ‚Äî –∫–∞–º–µ—Ä–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –±–∞–ª—Ç–∏–π—Å–∫–æ–π –∫—É—Ö–Ω–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞.\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —É–≤–∞–∂–∞–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ–º—Å—è –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º —ç—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞.\n\n"
        "üìç –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –∏—Å—Ç–æ—Ä–∏–∏, –∫—É—Ö–Ω–µ –∏ –Ω–∞—à–µ–º –ø–æ–¥—Ö–æ–¥–µ."
    )
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data='menu')],
        [InlineKeyboardButton("üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–π–æ–Ω–∞", callback_data='history'),
         InlineKeyboardButton("üì∏ –ò–Ω—Ç–µ—Ä—å–µ—Ä", callback_data='interior')],
        [InlineKeyboardButton("üí° –ö–æ–Ω—Ü–µ–ø—Ü–∏—è", callback_data='concept'),
         InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')],
        [InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", url=BOOKING_URL)]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_message, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'menu':
        menu_images = get_menu_images()
        
        if menu_images:
            try:
                if len(menu_images) == 1:
                    with open(menu_images[0], 'rb') as photo:
                        back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
                        back_markup = InlineKeyboardMarkup(back_button)
                        
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
                        await query.edit_message_media(
                            media=InputMediaPhoto(media=photo, caption="üìã *–ú–ï–ù–Æ –†–ï–°–¢–û–†–ê–ù–ê ¬´–®–¢–ê–ô–ù–î–ê–ú–ú, 99¬ª*", parse_mode='Markdown'),
                            reply_markup=back_markup
                        )
                else:
                    # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º, –ø–æ—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
                    media_group = []
                    for i, image_path in enumerate(menu_images):
                        with open(image_path, 'rb') as photo_file:
                            data = photo_file.read()
                            if i == 0:
                                media_group.append(InputMediaPhoto(
                                    media=data,
                                    caption="üìã *–ú–ï–ù–Æ –†–ï–°–¢–û–†–ê–ù–ê ¬´–®–¢–ê–ô–ù–î–ê–ú–ú, 99¬ª*",
                                    parse_mode='Markdown'
                                ))
                            else:
                                media_group.append(InputMediaPhoto(media=data))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    await context.bot.send_media_group(
                        chat_id=query.message.chat_id,
                        media=media_group
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
                    back_markup = InlineKeyboardMarkup(back_button)
                    
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=back_markup
                    )
                    
                    # –ù–µ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–Ω—é: {e}")
        else:
            logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    elif query.data == 'history':
        history_text = (
            "üèõÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç–∞*\n\n"
        "–†–µ—Å—Ç–æ—Ä–∞–Ω *–®—Ç–∞–π–Ω–¥–∞–º–º 99* ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, –∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ–≤–µ–∫–æ–≤–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏.\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ *–®—Ç–∞–π–Ω–¥–∞–º–º* (–≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –Ω–µ–º–µ—Ü–∫–æ–≥–æ ‚Äî '–∫–∞–º–µ–Ω–Ω–∞—è –¥–∞–º–±–∞') ‚Äî –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, "
        "–∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –∑–¥–µ—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–∞ –ö—ë–Ω–∏–≥—Å–±–µ—Ä–≥–∞. –≠—Ç–æ –±—ã–ª–∞ –æ–¥–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π –≥–æ—Ä–æ–¥–∞, "
        "–º–µ—Å—Ç–æ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –¥–ª—è –∫—É–ø—Ü–æ–≤, –≥–æ—Ä–æ–∂–∞–Ω –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤. –ó–¥–µ—Å—å –∫–∏–ø–µ–ª–∞ –∂–∏–∑–Ω—å ‚Äî —Ä—ã–Ω–∫–∏, —Ç—Ä–∞–∫—Ç–∏—Ä—ã, –ª–∞–≤–∫–∏, –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã, —Ç–µ–ª–µ–≥—Ä–∞—Ñ.\n\n"
        "–ó–¥–∞–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è, ‚Äî –æ–¥–∏–Ω –∏–∑ –Ω–µ–º–Ω–æ–≥–∏—Ö —É—Ü–µ–ª–µ–≤—à–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞. "
        "–û–Ω–æ –ø–µ—Ä–µ–∂–∏–ª–æ –≤–æ–π–Ω—ã, –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∏ –∏ —Å–º–µ–Ω—É —ç–ø–æ—Ö. –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ –º–µ—Å—Ç–æ "
        "–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏–µ–π ‚Äî –∑–¥–µ—Å—å –±—ã–ª–∏ —Ç—Ä–∞–∫—Ç–∏—Ä—ã, –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã.\n\n"
        "–ú—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ *–®—Ç–∞–π–Ω–¥–∞–º–º 99*, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å –æ–± —ç—Ç–æ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –º–µ—Å—Ç–µ –∏ –¥–∞—Ç—å –µ–º—É –Ω–æ–≤—É—é –∂–∏–∑–Ω—å. "
        "–°–µ–≥–æ–¥–Ω—è –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç—Ç—É —Ç—Ä–∞–¥–∏—Ü–∏—é, —Å–æ—á–µ—Ç–∞—è —É–≤–∞–∂–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –±–∞–ª—Ç–∏–π—Å–∫–æ–π –∫—É—Ö–Ω–∏."
        )
        
        back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        back_markup = InlineKeyboardMarkup(back_button)
        
        await query.edit_message_text(
            text=history_text,
            reply_markup=back_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'interior':
        interior_images = get_interior_images()
        
        if interior_images:
            try:
                if len(interior_images) == 1:
                    with open(interior_images[0], 'rb') as photo:
                        back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
                        back_markup = InlineKeyboardMarkup(back_button)
                        
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
                        await context.bot.send_photo(
                            chat_id=query.message.chat_id,
                            photo=photo,
                            caption="üì∏ *–ò–ù–¢–ï–†–¨–ï–† –†–ï–°–¢–û–†–ê–ù–ê ¬´–®–¢–ê–ô–ù–î–ê–ú–ú, 99¬ª*\n\n–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –ö—ë–Ω–∏–≥—Å–±–µ—Ä–≥–∞",
                            parse_mode='Markdown',
                            reply_markup=back_markup
                        )
                else:
                    media_group = []
                    for i, image_path in enumerate(interior_images):
                        with open(image_path, 'rb') as photo_file:
                            data = photo_file.read()
                            if i == 0:
                                media_group.append(InputMediaPhoto(
                                    media=data,
                                    caption="üì∏ *–ò–ù–¢–ï–†–¨–ï–† –†–ï–°–¢–û–†–ê–ù–ê ¬´–®–¢–ê–ô–ù–î–ê–ú–ú, 99¬ª*\n\n–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –ö—ë–Ω–∏–≥—Å–±–µ—Ä–≥–∞",
                                    parse_mode='Markdown'
                                ))
                            else:
                                media_group.append(InputMediaPhoto(media=data))
                    
                    await context.bot.send_media_group(
                        chat_id=query.message.chat_id,
                        media=media_group
                    )
                    
                    back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
                    back_markup = InlineKeyboardMarkup(back_button)
                    
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=back_markup
                    )
                    
                    # –ù–µ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞: {e}")
        else:
            logger.warning("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    elif query.data == 'contacts':
        contacts_text = (
            f"üìû *–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø*\n\n"
            f"üìç *–ê–¥—Ä–µ—Å:*\n{CONTACT_INFO['address']}\n\n"
            f"‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:*\n{CONTACT_INFO['phone']}\n\n"
            f"üïê *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:*\n{CONTACT_INFO['hours']}\n\n"
            f"üí° _–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –∑–∞—Ä–∞–Ω–µ–µ!_"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",  url=f"{CONTACT_INFO['coordinates']}")],
            [InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", url=BOOKING_URL)],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=contacts_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'feedback':
        feedback_text = (
            "üí¨ *–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨*\n\n"
            "–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –º–Ω–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π!\n\n"
            "üìù *–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:*\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
            "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n\n"
            "üåü *–ß—Ç–æ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:*\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –±–ª—é–¥ –∏ —Å–µ—Ä–≤–∏—Å–∞\n"
            "‚Ä¢ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ò–¥–µ–∏ –Ω–æ–≤—ã—Ö –±–ª—é–¥\n"
            "‚Ä¢ –õ—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
            "_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–µ–º!_"
        )
        
        back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        back_markup = InlineKeyboardMarkup(back_button)
        
        await query.edit_message_text(
            text=feedback_text,
            reply_markup=back_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'back_to_main':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        welcome_message = (
             "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–®—Ç–∞–π–Ω–¥–∞–º–º 99* ‚Äî –∫–∞–º–µ—Ä–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –±–∞–ª—Ç–∏–π—Å–∫–æ–π –∫—É—Ö–Ω–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞.\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —É–≤–∞–∂–∞–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ–º—Å—è –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º —ç—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞.\n\n"
        "üìç –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –∏—Å—Ç–æ—Ä–∏–∏, –∫—É—Ö–Ω–µ –∏ –Ω–∞—à–µ–º –ø–æ–¥—Ö–æ–¥–µ."
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data='menu')],
            [InlineKeyboardButton("üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–π–æ–Ω–∞", callback_data='history'),
             InlineKeyboardButton("üì∏ –ò–Ω—Ç–µ—Ä—å–µ—Ä", callback_data='interior')],
            [InlineKeyboardButton("üí° –ö–æ–Ω—Ü–µ–ø—Ü–∏—è", callback_data='concept'),
             InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='feedback')],
            [InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", url=BOOKING_URL)]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=welcome_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'concept':
        concept_text = (
            "üéØ *–ö–æ–Ω—Ü–µ–ø—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –®—Ç–∞–π–Ω–¥–∞–º–º 99*\n\n"
        "–†–µ—Å—Ç–æ—Ä–∞–Ω *–®—Ç–∞–π–Ω–¥–∞–º–º 99* ‚Äî —ç—Ç–æ –∫–∞–º–µ—Ä–Ω–æ–µ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π, "
        "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏. –ú—ã —Å–æ–∑–¥–∞–ª–∏ –º–µ—Å—Ç–æ, –≥–¥–µ –µ–¥–∞, –∏—Å—Ç–æ—Ä–∏—è –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –≤–æ–µ–¥–∏–Ω–æ.\n\n"
        "–í –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ ‚Äî *–±–∞–ª—Ç–∏–π—Å–∫–∞—è –∫—É—Ö–Ω—è*, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. "
        "–ù–∞—à–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ ‚Äî —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞, —Å—ã—Ä–æ–≤–∞—Ä–Ω–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—ã—Ä–æ–≤–∞—Ä–Ω—è ¬´–ö—Ä–∞–Ω—Ü¬ª), —Ä—ã–±–∞–∫–∏ –∏ —Ç—Ä–∞–≤–Ω–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞.\n\n"
        "–ú—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: –≤ –±–∞—Ä–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç–æ–µ–∫ –∏ –∫–æ–∫—Ç–µ–π–ª–µ–π, "
        "–∞ –≤–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–¥–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º.\n\n"
        "‚ôªÔ∏è –í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π *Zero Waste*, –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –±–µ—Ä–µ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, —Å–æ–∫—Ä–∞—â–∞—Ç—å –æ—Ç—Ö–æ–¥—ã, –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –∫–æ–º–ø–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∫—É.\n\n"
        "–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –≥–æ—Å—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é –∂–∏–≤–æ–π, —Ä–∞–∑–≤–∏–≤–∞—é—â–µ–π—Å—è –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞."
        )
        
        back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        back_markup = InlineKeyboardMarkup(back_button)
        
        await query.edit_message_text(
            text=concept_text,
            reply_markup=back_markup,
            parse_mode='Markdown'
        )

async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç."""
    if update.message:
        user = update.message.from_user
        text = update.message.text
        
        feedback_message = (
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.first_name} (id: {user.id}):\n\n{text}"
        )
        
        await context.bot.send_message(
            chat_id=FEEDBACK_CHAT_ID,
            text=feedback_message
        )
        
        back_button = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        back_markup = InlineKeyboardMarkup(back_button)
        
        reply_text = (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè\n\n"
            "–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π ‚Äî –æ–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        
        await update.message.reply_text(reply_text, reply_markup=back_markup)
        
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), feedback_handler))
    
    application.run_polling()

if __name__ == '__main__':
    main()
